import threading
from typing import overload, Self, Any
from enum import Enum

class ClientMsgTypes(Enum):
    STATUS: str = "status"
    NOTIFICATION: str = "notification"
    BOTH: str = "both"
    def __eq__(self, other: 'ClientMsgTypes') -> bool: ...

class Workspace:
    @overload
    def __init__(self: Self, port: int, host: str, path: str, workspace_id: str) -> None:
        self.path: str = ...
        self.port: int = ...
        self.host: str = ...
        self.workspace_id: str
        self.grapycal_id_count: int = ...
        self.is_running: bool = ...
        # self.running_module = ...
        # self._objectsync: 'Server' = ...
        # self._extension_manager = ...
        # self._slash_commands_topic = ...
        # self.slash = ...


    def run(self: Self, run_runner: bool) -> None: ...
    def _setup_objectsync(self: Self) -> None: ...
    def _setup_slash_commands(self: Self) -> None: ...
    async def _async_communication_thread(self: Self, event_loop_set_event: threading.Event) -> None: ...
    def _setup_store(self: Self) -> None: ...
    def _load_or_create_workspace(self: Self) -> None: ...
    def _initialize_workspace(self: Self) -> None: ...
    def _save_workspace(self: Self, path: str) -> None: ...
    def _load_workspace(self: Self, path: str) -> None: ...
    def _check_grapycal_version(self: Self, version: str) -> None: ...
    def _check_extensions_version(self: Self, extensions_info: list) -> None: ...
    def _open_workspace_callback(self: Self, path: str, no_exist_ok: bool = ...) -> None: ...
    def _send_message_to_all(self: Self, message: str, type: 'ClientMsgTypes' = ...) -> None: ...
    def _send_message(self: Self, message: str, client_id: str | None = ..., type: 'ClientMsgTypes' = ...) -> None: ...
    def _next_id(self: Self) -> int: ...
    def _clear_edges(self: Self) -> None: ...
    def _vars(self: Self) -> dict[str, Any]: ...
    def _exit(self: Self) -> None: ...
    def _interrupt(self: Self) -> None: ...
    def _client_connected(self: Self, client_id: str) -> None: ...
    def _client_disconnected(self: Self, client_id: str) -> None: ...